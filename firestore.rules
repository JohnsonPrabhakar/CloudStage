
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // For this app, we allow any signed-in user to perform admin-like actions through the UI,
    // which has its own email-based checks. A production app would use custom claims for true role-based access.
    function isAdmin() {
      return isSignedIn();
    }

    // Events can be read by anyone. They can be created and updated by the artist who owns them.
    match /events/{eventId} {
      allow read: if true;
      allow create: if isSignedIn() && request.resource.data.artistId == request.auth.uid;
      allow update: if isSignedIn() && (resource.data.artistId == request.auth.uid || isAdmin());
      allow delete: if false; // Disallow deleting events from the client
    }

    // Artist profiles can be read by anyone. They can only be updated by the owner.
    match /artists/{artistId} {
      allow read: if true;
      allow create: if isOwner(artistId); // Allow a user to create their own artist document
      allow update: if isOwner(artistId);
      allow delete: if isAdmin(); // Allow admin to reject/remove artists
    }

    // Movies can be read by anyone. Write operations are restricted.
    match /movies/{movieId} {
      allow read: if true;
      allow write: if isAdmin(); // Admin can create, update, delete movies via the UI
    }

    // Tickets can only be created and read by the user who owns them.
    match /tickets/{ticketId} {
      allow read: if isSignedIn() && resource.data.userId == request.auth.uid;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }

    // Site configuration can be read by anyone but only written by an admin.
    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
