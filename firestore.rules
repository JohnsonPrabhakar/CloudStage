
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      // Check if the user's UID exists in the 'admins' collection.
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    // Events collection rules
    match /events/{eventId} {
      // Anyone can read an event if it is approved. Admins can read ANY event.
      // This is the key fix for the admin dashboard.
      allow read: if resource.data.moderationStatus == 'approved' || isAdmin();
      
      // Only authenticated artists can create events.
      allow create: if request.auth != null && request.resource.data.artistId == request.auth.uid;
      
      // Artists can update their own events. Admins can update any event for moderation.
      allow update: if request.auth != null && (resource.data.artistId == request.auth.uid || isAdmin());
      
      // No one can delete events to preserve history.
      allow delete: if false;
    }
    
    // Artists collection rules
    match /artists/{artistId} {
      // Anyone can read an artist's profile.
      allow read: true;
      
      // An authenticated user can create their own artist profile.
      allow create: if request.auth != null && request.auth.uid == artistId;

      // An artist can update their own profile. Admins can update any profile (e.g., to approve them).
      allow update: if request.auth != null && (request.auth.uid == artistId || isAdmin());
      
      // Admins can delete artist profiles (e.g., for rejection).
      allow delete: if isAdmin();
    }
    
    // Tickets collection rules
    match /tickets/{ticketId} {
        // A user can read their own tickets. Admins can read all tickets for support.
        allow read: if request.auth != null && (resource.data.userId == request.auth.uid || isAdmin());
        
        // A user can create their own tickets.
        allow write: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }
    
    // Movies collection rules
    match /movies/{movieId} {
        // Anyone can watch movies.
        allow read: true;
        
        // Only admins can add, update, or delete movies.
        allow write: if isAdmin();
    }
    
    // Admins collection for role management
    match /admins/{adminId} {
        // Only admins can see who else is an admin.
        allow read: if isAdmin();
        // Allow the login function to create the admin document.
        allow create: if request.auth != null && request.auth.uid == adminId;
        allow update: if request.auth != null && request.auth.uid == adminId;
        allow delete: if false;
    }

    // Config collection for site settings
    match /config/{configId} {
      // Anyone can read config (like site status).
      allow read: true;
      // Only admins can write to config.
      allow write: if isAdmin();
    }
  }
}
