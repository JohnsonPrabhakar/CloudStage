
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an authenticated artist
    function isArtist(userId) {
      return exists(/databases/$(database)/documents/artists/$(userId));
    }

    // Helper function to check if a user is the admin
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'admin@cloudstage.in';
    }

    // Helper function to check if an artist's profile is approved
    function isArtistApproved(userId) {
        return get(/databases/$(database)/documents/artists/$(userId)).data.isApproved == true;
    }

    // Events can be read by anyone if they are approved.
    // Artists can read their own events regardless of status.
    match /events/{eventId} {
      allow read: if resource.data.moderationStatus == 'approved'
                  || (isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId);
      
      // Events can only be created by an approved artist.
      allow create: if isArtist(request.auth.uid) 
                      && isArtistApproved(request.auth.uid)
                      && request.auth.uid == request.resource.data.artistId;

      // Events can be updated by the admin (for moderation) or by the artist owner.
      allow update: if isAdmin() || (isArtist(request.auth.uid) && request.auth.uid == resource.data.artistId);
      
      // Events can't be deleted by clients.
      allow delete: if false;
    }

    // Artists can read any approved artist's profile.
    // An artist can read their own profile.
    // Admins can read any profile.
    match /artists/{artistId} {
      allow read: if resource.data.isApproved == true 
                  || (request.auth.uid != null && request.auth.uid == artistId) 
                  || isAdmin();
                  
      // Allow artists to register.
      allow create: if request.auth.uid == artistId;

      // An artist can update their own profile. Admin can also update profiles.
      allow update: if (request.auth.uid != null && request.auth.uid == artistId) || isAdmin();
      
      // Admin can delete artist profiles (rejection).
      allow delete: if isAdmin();
    }
    
    // Movies can be read by anyone.
    // Only admins can create, update, or delete movies.
    match /movies/{movieId} {
      allow read: if true;
      allow write: if isAdmin();
    }

    // Tickets can be created by any authenticated user.
    // Users can only read or manage their own tickets.
    match /tickets/{ticketId} {
       allow read: if (request.auth.uid != null && request.auth.uid == resource.data.userId) || isAdmin();
       allow create: if request.auth.uid != null && request.auth.uid == request.resource.data.userId;
       allow update, delete: if false; // Simplification: no updates/deletes from client
    }
    
    // Config can be read by anyone (for site status) but only written by admin.
    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
