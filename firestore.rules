rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAdmin() {
      return request.auth != null && request.auth.token.email == 'admin@cloudstage.in';
    }
    
    function isOwner(uid) {
      return request.auth != null && request.auth.uid == uid;
    }

    function isArtist(uid) {
      // An artist is someone who has a document in the 'artists' collection with their UID.
      return exists(/databases/$(database)/documents/artists/$(uid));
    }
    
    function isApprovedArtist(uid) {
      // An approved artist is one whose 'isApproved' field is true.
      return isArtist(uid) && get(/databases/$(database)/documents/artists/$(uid)).data.isApproved == true;
    }

    // --- Collections Rules ---

    // Artists: Anyone can create (register). Only owners or admin can update. Public read. Admin can do anything.
    match /artists/{artistId} {
      allow read: if true;
      allow create: if isOwner(artistId); // During registration, a user creates their own artist doc
      allow update: if isOwner(artistId) || isAdmin();
      allow delete: if isAdmin(); // Only admin can reject/delete artists
    }

    // Events: Approved artists can create. Only the original artist can update. Public can read approved events. Admin can do anything.
    match /events/{eventId} {
      allow read: if resource.data.moderationStatus == 'approved' || isOwner(resource.data.artistId) || isAdmin();
      allow create: if isApprovedArtist(request.auth.uid) && request.resource.data.artistId == request.auth.uid;
      allow update: if isOwner(resource.data.artistId) || isAdmin();
      allow delete: if isOwner(resource.data.artistId) || isAdmin();
    }
    
    // Tickets: Logged-in users can create and read their own tickets. Admin has full read access.
    match /tickets/{ticketId} {
      allow read: if isOwner(resource.data.userId) || isAdmin();
      allow create: if isOwner(request.resource.data.userId);
    }
    
    // Movies: Public read. Only admin can write/delete.
    match /movies/{movieId} {
      allow read: if true;
      allow write, delete: if isAdmin();
    }
    
    // Config: Public read. Admin write.
    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
  }
}
