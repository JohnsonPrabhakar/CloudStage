
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(resourceId) {
      return request.auth.uid == resourceId;
    }
    function isAdmin() {
      // Make sure the user is authenticated before checking email
      return request.auth != null && request.auth.token.email == 'admin@cloudstage.in';
    }
    function isArtistApproved(artistId) {
      // Check that the artist's profile exists and is approved.
      // This is used to ensure only approved artists can create events.
      return get(/databases/$(database)/documents/artists/$(artistId)).data.isApproved == true;
    }

    // ARTIST Rules
    match /artists/{artistId} {
      // READ: Anyone can view a public artist profile.
      allow get: if true;
      // LIST: Only Admins can list multiple artists (for the approval dashboard).
      allow list: if isAdmin();
      
      // CREATE: A new user can create their own artist profile document.
      allow create: if isOwner(artistId);

      // UPDATE: Artists can update their own profile. Admins can update any profile.
      allow update: if isOwner(artistId) || isAdmin();

      // DELETE: Only Admins can delete artist profiles.
      allow delete: if isAdmin();
    }

    // EVENT Rules
    match /events/{eventId} {
      // READ (get and list):
      // - Anyone can read events that are 'approved'.
      // - An artist can read their own events, regardless of status.
      // - An admin can read any event.
      allow read: if resource.data.moderationStatus == 'approved' || 
                     (request.auth != null && request.auth.uid == resource.data.artistId) || 
                     isAdmin();
      
      // CREATE: An approved artist can create an event for themselves.
      allow create: if (request.auth.uid == request.resource.data.artistId) && isArtistApproved(request.auth.uid);

      // UPDATE: An artist can update their own event. An admin can update any event.
      allow update: if (request.auth.uid == resource.data.artistId) || isAdmin();
      
      // DELETE: Only Admins can delete events.
      allow delete: if isAdmin();
    }

    // TICKET Rules
    match /tickets/{ticketId} {
      // READ: Users can read their own tickets. Admins can read any ticket.
      allow get, list: if (request.auth != null && request.auth.uid == resource.data.userId) || isAdmin();
      
      // CREATE: An authenticated user can create a ticket for themselves.
      allow create: if request.auth.uid == request.resource.data.userId;
    }
    
    // MOVIE Rules
    match /movies/{movieId} {
        // READ: Anyone can read movie documents.
        allow read: if true;
        // WRITE: Only admins can create, update, or delete movies.
        allow write: if isAdmin();
    }
    
    // CONFIG Rules
    match /config/{configId} {
        // READ: Anyone can read site config (like site status).
        allow read: if true;
        // WRITE: Only admins can change site config.
        allow write: if isAdmin();
    }
  }
}
