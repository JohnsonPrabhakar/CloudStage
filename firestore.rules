
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Artists can be read by anyone, but only the authenticated artist can manage their own profile.
    match /artists/{artistId} {
      allow read: if true;
      allow create: if request.auth != null && request.auth.uid == artistId;
      allow update: if request.auth != null && request.auth.uid == artistId;
      // Admin rejection is handled by a client-side authenticated admin.
      allow delete: if request.auth != null;
    }

    // Approved events can be read by anyone. Artists can manage their own events.
    // Admin actions (like approval) are allowed for any authenticated user,
    // but gated by the logic in the AdminDashboard component.
    match /events/{eventId} {
      allow read: if resource.data.moderationStatus == 'approved';
      allow create: if request.auth != null && request.auth.uid == request.resource.data.artistId;
      allow update: if request.auth != null;
    }

    // Movies can be read by anyone. Write operations are restricted to authenticated users
    // (and gated by admin-only logic on the client).
    match /movies/{movieId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null;
    }

    // Tickets can only be created and viewed by the user who owns them.
    match /tickets/{ticketId} {
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
    }

    // Site configuration (like online/offline status) is readable by all,
    // but only writable by an authenticated user (the admin).
    match /config/{configId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
  }
}
