
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // --- Helper Functions ---
    function isAuth() {
      return request.auth != null;
    }
    
    function isAdmin() {
      // The single source of truth for admin role is the email address in the auth token.
      return isAuth() && request.auth.token.email == 'admin@cloudstage.in';
    }

    function isOwner(uid) {
      return isAuth() && request.auth.uid == uid;
    }
    
    // --- Collection Rules ---

    // Artists collection: profiles of performers.
    match /artists/{artistId} {
      // Anyone can view an artist's profile.
      allow get: if true;
      // Only an admin can query the list of artists (e.g., for the approval dashboard).
      allow list: if isAdmin();
      // A user can create their own artist profile.
      allow create: if isOwner(artistId);
      // An artist can update their own profile, or an admin can update any profile.
      allow update: if isOwner(artistId) || isAdmin();
      // Only an admin can delete an artist profile.
      allow delete: if isAdmin();
    }

    // Admins collection: used to mark users as administrators.
    match /admins/{adminId} {
        // Only an admin can read or create documents here. 
        // This is primarily for a fallback creation on first login.
        allow get, create: if isOwner(adminId) && isAdmin();
    }

    // Events collection: all performances on the platform.
    match /events/{eventId} {
      // Read is allowed if the event is approved (public), or if the user is an admin,
      // or if the user is the artist who created the event.
      allow get: if resource.data.moderationStatus == 'approved' || isAdmin() || (isAuth() && request.auth.uid == resource.data.artistId);
      // Listing events has stricter rules.
      allow list: if isAdmin() || resource.data.moderationStatus == 'approved';

      // An authenticated artist can create an event for themselves.
      allow create: if isAuth() && request.auth.uid == request.resource.data.artistId;
      // An artist can update their own event, or an admin can.
      allow update: if (isAuth() && request.auth.uid == resource.data.artistId) || isAdmin();
      // Only an admin can delete an event.
      allow delete: if isAdmin();
    }

    // Movies collection: for on-demand video content.
    match /movies/{movieId} {
      // Anyone can view or list movies.
      allow get, list: if true;
      // Only an admin can create, update, or delete movies.
      allow write: if isAdmin();
    }

    // Tickets collection: user-purchased tickets for events.
    match /tickets/{ticketId} {
      // A user can read their own tickets. An admin can read any ticket.
      allow get, list: if isAuth() && (isOwner(resource.data.userId) || isAdmin());
      // A user can create a ticket for themselves.
      allow create: if isAuth() && isOwner(request.resource.data.userId);
      
      // Tickets are immutable by clients once created.
      allow update, delete: if false;
    }
    
    // Config collection: for global site settings like maintenance mode.
    match /config/{docId} {
      // Anyone can read the site configuration.
      allow get: if true;
      // Only an admin can change the site configuration.
      allow write: if isAdmin();
    }
  }
}

    